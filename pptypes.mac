; See LICENSE.txt for license details
;
.if ndf, _PPTYPES_MAC_
_PPTYPES_MAC_	== 0
 .if ndf,M68000
   .warn ;You should .include constants.mac before .including pptypes.mac
   .include constants.mac
 .endc
 .if ndf,PROCESSOR
   .error ;You need to define PROCESSOR before .including pptypes.mac
   HEX_CONST PROCESSOR 0
 .endc
.if true, OUTPUT_LANG == LANG_C
#if !defined(_PPTYPES_H_)
#define _PPTYPES_H_
#include <stdint.h>
   HEX_CONST S32_MAX 0x7FFFFFFF
   HEX_CONST S32_MIN 0x80000000
   HEX_CONST U32_MAX 0xFFFFFFFF
   HEX_CONST U32_MIN 0x00000000
.endc
 .if ndf,NO_LONGLONG
   HEX_CONST NO_LONGLONG 1
 .endc
;
;
REM <	Actual Type Declarations>
;
 .if ne,ANSI_OK
 .if true, (((PROCESSOR & -16) == MIPS4000) || (PROCESSOR == I86x32) || (PROCESSOR == I86x64))
  .if true, (NO_LONGLONG != 0)
	TYPE	VS64	<volatile int64_t> 8
	TYPE	VU64	<volatile uint64_t> 8
  .iff
	TYPE	VS64	<volatile long long> 8
	TYPE	VU64	<volatile unsigned long long> 8
  .endc
 .endc
 	TYPE	VS32	<volatile int32_t> 4
	TYPE	VS16	<volatile int16_t> 2
	TYPE	VS8	<volatile int8_t> 1
	TYPE	VS08	<volatile int8_t> 1
	TYPE	VU32	<volatile uint32_t> 4
	TYPE	VU16	<volatile uint16_t> 2
	TYPE	VU8	<volatile uint8_t> 1
	TYPE	VU08	<volatile uint8_t> 1
	TYPE	VF32	<volatile float> 4
	TYPE	VF64	<volatile double> 8
 .endc
 .if eq,ANSI_OK
 .if true, (((PROCESSOR & -16) == MIPS4000) || (PROCESSOR == I86x32) || (PROCESSOR == I86x64))
  .if true, (NO_LONGLONG != 0)
	TYPE	VS64	<int64_t> 8
	TYPE	VU64	<uint64_t> 8
  .iff
	TYPE	VS64	<long long> 8
	TYPE	VU64	<unsigned long long> 8
  .endc
 .endc
	TYPE	VS32	< int32_t> 4
	TYPE	VS16	< int16_t> 2
	TYPE	VS8	< int8_t> 1
	TYPE	VS08	< int8_t> 1
	TYPE	VU32	< uint32_t> 4
	TYPE	VU16	< uint16_t> 2
	TYPE	VU8	< uint8_t> 1
	TYPE	VU08	< uint8_t> 1
	TYPE	VF32	< float> 4
	TYPE	VF64	< double> 8
 .endc
 .if true ,(PROCESSOR == M68010) || (PROCESSOR == M68000)
	TYPE	m_int	<int16_t> 2 
	TYPE	m_uint	<uint16_t> 2
 .iff
	TYPE	m_int	<int32_t> 4 
	TYPE	m_uint	<uint32_t> 4
 .endc
	TYPE	U8	<uint8_t> 1
	TYPE	U08	<uint8_t> 1
 .if ne,ANSI_OK
	TYPE	S8	<int8_t> 1
	TYPE	S08	<int8_t> 1
 .iff
	TYPE	S8	<int8_t> 1
	TYPE	S08	<int8_t> 1
 .endc
	TYPE	U16	<uint16_t> 2
	TYPE	S16	<int16_t> 2
	TYPE	U32	<uint32_t> 4
	TYPE	S32	<int32_t> 4
	TYPE	F32	<float> 4
	TYPE	F64	<double> 8
 .if true, (((PROCESSOR & -16) == MIPS4000) || (PROCESSOR == I86x32) || (PROCESSOR == I86x64))
  .if true, (NO_LONGLONG != 0)
	TYPE	S64	<int64_t> 8
	TYPE	U64	<uint64_t> 8
  .iff
	TYPE	S64	<long long> 8
	TYPE	U64	<unsigned long long> 8
  .endc
 .endc
	TYPE	RD_TYP	<struct rdb> 12
	TYPE	RR_TYP	<struct rrb> 16
	TYPE	MN_TYP	<struct menub> 8
	TYPE	PB_TYP	<struct pconfigp> 8
	TYPE	CR_TYP	<struct creditsb> 4
;
	.if	eq,OUTPUT_LANG-LANG_C
struct menu_d {
	char	*mn_label;		    /* menu item label		*/
	int	(*mn_call)(const struct menu_d*); /* menu item routine call	*/
};
;
struct menub {
	char		*mn_label;	/* menu item label		*/
	void		(*mn_call)();	/* menu item routine call	*/
};
;
struct creditsb {
	uint16_t	crd_whole;	/* Integer part of coins	*/
	uint8_t		crd_num;	/* numerator			*/
	uint8_t		crd_denom;	/* denominator			*/
};
REM <	General purpose Environment Table structure>
	STR_START	st_envar
	STR_ELT		name <const char *> 1 < for lookup>
	STR_ELT		value <const void *> 1 < could point to anything>
	STR_ELT		next <const struct st_envar *> 1 < chain >
	STR_ELT		version <unsigned long> 1 < not yet used>
	STR_END		st_envar
	.endc
;
REM <	Structure to describe RAM area to test>
	STR_START	rdb
	STR_ELT		rd_base	<unsigned long *> 1 < Starting address >
	STR_ELT		rd_len	<unsigned long>	1 < Length in bytes >
	STR_ELT		rd_misc	<unsigned long>	1 < Which bits exist>
	STR_END		rdb
;
REM <	Structure to describe the non-processor specific post mortem variables >
.if not_defined, PM_TEXT_SIZE
	DEC_CONST PM_TEXT_SIZE	80	<Up to 80 bytes of postmortem text>
.endc
.if not_defined, CN_SALVAGE
	DEC_CONST CN_SALVAGE 0	<Attept to salvage coins across crashes>
.endc
	STR_START pm_general
	STR_ELT	pm_msg		<const char *> 1 <Pointer to message>
	STR_ELT pm_text		char PM_TEXT_SIZE <Local copy of text message>
	STR_ELT	pm_stack	U32* 1	<Stack pointer in target's address space>
	STR_ELT pm_stkupper	U32* 1  <Stack upper limit in target's address space>
	STR_ELT pm_stklower	U32* 1  <Stack lower limit in target's address space>
	STR_ELT pm_stkrelative	U32* 1  <Stack pointer in host's address space>
	STR_ELT	pm_cntr		S32  1	<Post mortem flag>
	STR_ELT	pm_pc		U32  1	<Program counter>
	STR_ELT	pm_sr		U32  1	<Status register>
	STR_ELT pm_regs		U32  32 <ASAP/R3K/R4K have 32. 68k only uses 16 of these>
	STR_ELT pm_cause	U32  1	<R3K/R4K cause register>
	STR_ELT pm_badvaddr	U32  1  <R3K/R4K bad virtual address register>
	STR_ELT pm_cn_salvage	U32  1	<Hiding place for salvaged coins>
	STR_ELT pm_reboot_flgs	U32  1  <Reboot flags>
	STR_ELT pm_padding	U32  8	<Room for additional items>
	STR_END pm_general
.if true, OUTPUT_LANG == LANG_C
# define _PM_GENERAL_STRUCT_	0	/* Disable the definition in st_proto.h */
# define PM_68K_SIZE	(sizeof(struct pm_general)-(18*4))
# define PM_RxK_SIZE	(sizeof(struct pm_general))
.iff
 .if true, OUTPUT_LANG == LANG_ASRxK		;GNU assembler
	DEC_CONST PM_68K_SIZE	(S_SIZ_PM_GENERAL-(18*4))
	DEC_CONST PM_RxK_SIZE	(S_SIZ_PM_GENERAL)
 .endc
.endc
;
;
REM <	Structure for optional return of RAM test results>
	STR_START	rrb
	STR_ELT		rr_addr <unsigned long *>	1 < Where it choked >
	STR_ELT		rr_expected <unsigned long>	1 < What it wanted >
	STR_ELT		rr_got	<unsigned long>		1 < What it got>
	STR_ELT		rr_test_no	<int>		1 < Which test >
	STR_END		rrb
;
	HEX_CONST B_NO_ROM_TEST	0	< bit # in p_debug_options to skip ROM checksum	>
	HEX_CONST NO_ROM_TEST	(1<<B_NO_ROM_TEST)
	HEX_CONST B_NO_RAM_TEST	1	< bit # in p_debug_options to skip RAM test	>
	HEX_CONST NO_RAM_TEST	(1<<B_NO_RAM_TEST)
	HEX_CONST B_NO_LOG_RESET 2	< bit # in p_debug_options to skip logging RESET>
	HEX_CONST NO_LOG_RESET	(1<<B_NO_LOG_RESET)
.if true, OUTPUT_LANG == LANG_C
#endif			/* _PPTYPES_H_ */
.endc
.endc			;_PPTYPES_MAC_
